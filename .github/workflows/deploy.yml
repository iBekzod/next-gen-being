# .github/workflows/deploy.yml
name: Deploy to LEMP Stack

on:
  push:
    branches: [ main ]

env:
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SSH_USER: ${{ secrets.SSH_USER }}
  APP_DIR: /var/www/nextgenbeing

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nextgenbeing_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: pgsql, mbstring, zip, gd, curl, xml, bcmath, intl, imagick, redis
          coverage: none

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Composer dependencies
        run: composer install --no-progress --no-interaction --prefer-dist

      - name: Install NPM dependencies and update lock file
        run: |
          npm install
          npm run build

      - name: Create and configure testing environment
        run: |
          # Create .env.testing for CI environment
          cat > .env.testing << 'EOF'
          APP_NAME="NextGenBeing"
          APP_ENV=testing
          APP_DEBUG=true
          APP_KEY=
          APP_URL=http://localhost

          # Testing Database - PostgreSQL (GitHub Actions)
          DB_CONNECTION=pgsql
          DB_HOST=localhost
          DB_PORT=5432
          DB_DATABASE=nextgenbeing_test
          DB_USERNAME=postgres
          DB_PASSWORD=postgres
          DB_SCHEMA=public

          # Cache & Session - Use array drivers for testing
          CACHE_DRIVER=array
          SESSION_DRIVER=array
          QUEUE_CONNECTION=sync

          # Mail - Use array driver for testing
          MAIL_MAILER=array

          # Disable external services during testing
          TELESCOPE_ENABLED=false
          DEBUGBAR_ENABLED=false
          HORIZON_ENABLED=false

          # Performance
          BCRYPT_ROUNDS=4
          EOF

          # Generate app key for testing
          php artisan key:generate --env=testing

      - name: Run database migrations for tests
        run: php artisan migrate --env=testing --force

      - name: Run tests
        run: php artisan test --env=testing

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH with private key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ${{ env.APP_DIR }}

          # Maintenance mode
          sudo -u www-data php artisan down || true

          # Pull latest changes
          sudo -u www-data git fetch origin
          sudo -u www-data git reset --hard origin/main

          # Install PHP dependencies
          sudo -u www-data composer install --no-dev --optimize-autoloader --no-interaction

          # Install Node.js dependencies using npm install (not ci)
          sudo -u www-data npm install --silent
          sudo -u www-data npm run build

          # Run database migrations
          sudo -u www-data php artisan migrate --force

          # Update site settings (policies, company name, etc.)
          sudo -u www-data php artisan db:seed --class=SiteSettingSeeder --force

          # Clear and cache config
          sudo -u www-data php artisan config:clear
          sudo -u www-data php artisan config:cache

          # Clear and cache routes
          sudo -u www-data php artisan route:clear
          sudo -u www-data php artisan route:cache

          # Clear and cache views
          sudo -u www-data php artisan view:clear
          sudo -u www-data php artisan view:cache

          # Clear other caches
          sudo -u www-data php artisan cache:clear
          sudo -u www-data php artisan event:cache

          # Set proper permissions
          sudo chown -R www-data:www-data ${{ env.APP_DIR }}
          sudo chmod -R 755 ${{ env.APP_DIR }}
          sudo chmod -R 775 ${{ env.APP_DIR }}/storage
          sudo chmod -R 775 ${{ env.APP_DIR }}/bootstrap/cache

          # Restart PHP-FPM
          sudo systemctl restart php8.4-fpm

          # Reload Nginx
          sudo systemctl reload nginx

          # Restart Supervisor processes
          sudo supervisorctl restart all

          # Bring application back up
          sudo -u www-data php artisan up

          echo "âœ… Deployment completed successfully!"
