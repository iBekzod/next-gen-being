# .github/workflows/deploy.yml
name: Deploy to LEMP Stack

on:
  push:
    branches: [ main ]

env:
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SSH_USER: ${{ secrets.SSH_USER }}
  APP_DIR: /var/www/nextgenbeing

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: pgsql, mbstring, zip, gd, curl, xml, bcmath, intl, imagick, redis
          coverage: none

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Composer dependencies
        run: composer install --no-progress --no-interaction --prefer-dist

      - name: Install NPM dependencies and update lock file
        run: |
          npm install
          npm run build

      - name: Copy environment file for testing
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Run tests
        run: php artisan test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH with private key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ${{ env.APP_DIR }}

          # Maintenance mode
          sudo -u www-data php artisan down || true

          # Pull latest changes
          sudo -u www-data git fetch origin
          sudo -u www-data git reset --hard origin/main

          # Install PHP dependencies
          sudo -u www-data composer install --no-dev --optimize-autoloader --no-interaction

          # Install Node.js dependencies using npm install (not ci)
          sudo -u www-data npm install --silent
          sudo -u www-data npm run build

          # Run database migrations
          sudo -u www-data php artisan migrate --force

          # Clear and cache config
          sudo -u www-data php artisan config:clear
          sudo -u www-data php artisan config:cache

          # Clear and cache routes
          sudo -u www-data php artisan route:clear
          sudo -u www-data php artisan route:cache

          # Clear and cache views
          sudo -u www-data php artisan view:clear
          sudo -u www-data php artisan view:cache

          # Clear other caches
          sudo -u www-data php artisan cache:clear
          sudo -u www-data php artisan event:cache

          # Set proper permissions
          sudo chown -R www-data:www-data ${{ env.APP_DIR }}
          sudo chmod -R 755 ${{ env.APP_DIR }}
          sudo chmod -R 775 ${{ env.APP_DIR }}/storage
          sudo chmod -R 775 ${{ env.APP_DIR }}/bootstrap/cache

          # Restart PHP-FPM
          sudo systemctl restart php8.4-fpm

          # Reload Nginx
          sudo systemctl reload nginx

          # Restart Supervisor processes
          sudo supervisorctl restart all

          # Bring application back up
          sudo -u www-data php artisan up

          echo "âœ… Deployment completed successfully!"