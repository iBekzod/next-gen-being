<?php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;

class ImageGenerationService
{
    private ?string $stabilityApiKey;
    private ?string $unsplashApiKey;

    public function __construct()
    {
        $this->stabilityApiKey = config('services.stability.api_key');
        $this->unsplashApiKey = config('services.unsplash.access_key');
    }

    /**
     * Generate a featured image for a blog post
     *
     * @param string $title Post title
     * @param string $topic Main topic/category
     * @return array|null ['url' => string, 'attribution' => array|null]
     */
    public function generateFeaturedImage(string $title, string $topic): ?array
    {
        // Try Stability AI first (if configured)
        if ($this->stabilityApiKey) {
            try {
                return $this->generateWithStabilityAI($title, $topic);
            } catch (\Exception $e) {
                Log::warning('Stability AI failed, falling back to Unsplash', [
                    'error' => $e->getMessage()
                ]);
            }
        }

        // Fallback to Unsplash
        if ($this->unsplashApiKey) {
            try {
                return $this->fetchFromUnsplash($topic);
            } catch (\Exception $e) {
                Log::error('Image generation failed completely', [
                    'error' => $e->getMessage()
                ]);
            }
        }

        // No image service configured
        Log::info('No image generation service configured, skipping featured image');
        return null;
    }

    /**
     * Generate image using Stability AI
     */
    private function generateWithStabilityAI(string $title, string $topic): array
    {
        $prompt = $this->createImagePrompt($title, $topic);

        $response = Http::timeout(60)
            ->withHeaders([
                'Authorization' => 'Bearer ' . $this->stabilityApiKey,
                'Content-Type' => 'application/json',
                'Accept' => 'application/json',
            ])
            ->post('https://api.stability.ai/v1/generation/stable-diffusion-xl-1024-v1-0/text-to-image', [
                'text_prompts' => [
                    [
                        'text' => $prompt,
                        'weight' => 1
                    ],
                    [
                        'text' => 'blurry, bad quality, distorted, ugly, watermark, text, logo',
                        'weight' => -1
                    ]
                ],
                'cfg_scale' => 7,
                'height' => 1024,
                'width' => 1024,
                'samples' => 1,
                'steps' => 30,
                'style_preset' => 'digital-art',
            ]);

        if (!$response->successful()) {
            throw new \Exception('Stability AI request failed: ' . $response->body());
        }

        $result = $response->json();

        if (empty($result['artifacts'])) {
            throw new \Exception('No image generated by Stability AI');
        }

        // Get base64 image
        $imageBase64 = $result['artifacts'][0]['base64'];
        $imageData = base64_decode($imageBase64);

        // Store image
        $filename = 'posts/featured/' . Str::random(40) . '.png';
        Storage::disk('public')->put($filename, $imageData);

        return [
            'url' => asset('storage/' . $filename),
            'attribution' => null, // AI-generated images don't need attribution
        ];
    }

    /**
     * Fetch relevant image from Unsplash
     */
    private function fetchFromUnsplash(string $topic): array
    {
        // Extract keywords from topic
        $keywords = $this->extractKeywords($topic);

        // Fetch multiple results and pick a random one to add variety
        $perPage = rand(5, 15);

        $response = Http::timeout(30)
            ->withHeaders([
                'Authorization' => 'Client-ID ' . $this->unsplashApiKey,
            ])
            ->get('https://api.unsplash.com/search/photos', [
                'query' => $keywords,
                'per_page' => $perPage,
                'orientation' => 'landscape',
                'content_filter' => 'high',
            ]);

        if (!$response->successful()) {
            throw new \Exception('Unsplash request failed: ' . $response->body());
        }

        $result = $response->json();

        if (empty($result['results'])) {
            // Fallback to generic tech image
            return $this->fetchFromUnsplash('technology abstract');
        }

        // Pick a random photo from results to add variety
        $randomIndex = rand(0, count($result['results']) - 1);
        $photo = $result['results'][$randomIndex];
        $imageUrl = $photo['urls']['regular'];

        // Download and store image
        $imageData = Http::timeout(30)->get($imageUrl)->body();
        $filename = 'posts/featured/' . Str::random(40) . '.jpg';
        Storage::disk('public')->put($filename, $imageData);

        // Track download for Unsplash API compliance
        if (isset($photo['links']['download_location'])) {
            Http::withHeaders([
                'Authorization' => 'Client-ID ' . $this->unsplashApiKey,
            ])->get($photo['links']['download_location']);
        }

        // Return image URL with attribution data
        return [
            'url' => asset('storage/' . $filename),
            'attribution' => [
                'photographer_name' => $photo['user']['name'],
                'photographer_username' => $photo['user']['username'],
                'photographer_url' => $photo['user']['links']['html'],
                'photo_url' => $photo['links']['html'],
                'source' => 'unsplash',
            ],
        ];
    }

    /**
     * Create optimized prompt for AI image generation
     */
    private function createImagePrompt(string $title, string $topic): string
    {
        // Add variety with random style elements
        $styles = [
            'minimalist', 'modern', 'futuristic', 'vibrant', 'sleek', 'dynamic',
            'elegant', 'bold', 'professional', 'artistic'
        ];
        $colors = [
            'blue and purple gradients', 'neon accents', 'warm tones',
            'cool tones', 'vibrant colors', 'monochromatic palette',
            'gradient colors', 'tech blue highlights'
        ];
        $compositions = [
            'centered composition', 'dynamic angles', 'layered design',
            'geometric patterns', 'flowing elements', 'structured layout'
        ];

        $randomStyle = $styles[array_rand($styles)];
        $randomColor = $colors[array_rand($colors)];
        $randomComposition = $compositions[array_rand($compositions)];

        // Create a professional, relevant prompt with variety
        $basePrompt = "Professional {$randomStyle} digital illustration for a blog post about {$topic}. ";

        // Add style based on topic
        if (stripos($topic, 'programming') !== false || stripos($topic, 'code') !== false) {
            $basePrompt .= "Modern tech aesthetic with code elements, clean design, {$randomColor}. ";
        } elseif (stripos($topic, 'AI') !== false || stripos($topic, 'machine learning') !== false) {
            $basePrompt .= "Futuristic AI theme with neural networks, abstract tech patterns, glowing elements, {$randomColor}. ";
        } elseif (stripos($topic, 'web') !== false) {
            $basePrompt .= "Modern web design aesthetic, browser interface, responsive layouts, {$randomColor}. ";
        } else {
            $basePrompt .= "Abstract technology concept, modern digital design, {$randomColor}. ";
        }

        $basePrompt .= "{$randomComposition}, high quality, sharp focus, professional blog header image, 16:9 aspect ratio, trending on artstation.";

        return $basePrompt;
    }

    /**
     * Extract relevant keywords from topic for Unsplash search
     */
    private function extractKeywords(string $topic): string
    {
        // Remove common words and get main keywords
        $stopWords = ['the', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'a', 'an'];

        $words = str_word_count(strtolower($topic), 1);
        $keywords = array_filter($words, function ($word) use ($stopWords) {
            return !in_array($word, $stopWords) && strlen($word) > 3;
        });

        // Add 'technology' to make it relevant
        $keywords[] = 'technology';

        return implode(' ', array_slice($keywords, 0, 3));
    }

    /**
     * Check if image generation is available
     */
    public function isAvailable(): bool
    {
        return $this->stabilityApiKey !== null || $this->unsplashApiKey !== null;
    }

    /**
     * Get provider being used
     */
    public function getProvider(): string
    {
        if ($this->stabilityApiKey) {
            return 'Stability AI';
        }

        if ($this->unsplashApiKey) {
            return 'Unsplash';
        }

        return 'None';
    }
}
